# Add line above: set efi_fs_uuid = UUID of EFI partition
# We look for config called grub_fs_uuid.cfg in rootdir of EFI partition

# ------------------------------------------------------------------------
# Should not have to change anything below this
# ------------------------------------------------------------------------

insmod memdisk
insmod part_gpt

function load_video {
  # To avoid errors that look like:
  # no suitable video mode found; booting in blind mode
  terminal_input console
  terminal_output console

  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

function load_grub_cfg {
    # Set root before calling this function
    # If grub.cfg was successfully loaded, will not return

    # Keep cfg_prefix as /boot/grub so that grub-EFI and grub-MBR can share the same
    # config. grub-MBR cannot contain an embedded config and always looks for
    # /boot/grub/grub.cfg
    set cfg_prefix=/boot/grub
    set cfgfile=grub.cfg
    set cfgpath=$cfg_prefix/$cfgfile
    if [ -f $cfgpath ]; then
        configfile $cfgpath
    fi
}

function error_no_grub_cfg {
    # Give up, but give user a more helpful message if cfg file is not found
    echo ""
    echo "# ------------------------------------------------------------------------"
    echo "Config file was not found: $cfgpath"
    echo ""
    echo "TWO steps to manually locate and load config file:"
    echo "1.  Define root"
    echo "use set root command to set root"
    echo "        Use ls to show partitions and directories / files"
    echo ""
    echo "2.  Load config file and return to menu"
    echo "  configfile ($root)/full/path/to/config"
    echo "        Use TAB to autocomplete"
    echo "# ------------------------------------------------------------------------"
    echo ""
}

function error_no_uuid_cfg {
    # Give up, tell user where grub_fs_uuid.cfg should be and what it contains
    echo ""
    echo "# ------------------------------------------------------------------------"
    echo "UUID config file was not found: $cfgpath"
    echo "This file should be called $cfgfile and should be in root of"
    echo "EFI partition"
    echo "It should contain one line defining variable grubfs_uuid"
    echo "to be UUID of partition containing /boot/grub/grub.cfg"
    echo ""
    echo "# ------------------------------------------------------------------------"
    echo ""
}

load_video

search --fs-uuid --set=root $efi_fs_uuid
set cfgfile="grub_fs_uuid.cfg"
set cfgpath=/$cfgfile

if [ -f $cfgpath ]; then
    source $cfgpath
    search --fs-uuid --set=root $grub_fs_uuid
    load_grub_cfg
    # If we got here, grub.cfg file was not found
    error_no_grub_cfg
else
    # Try with root set from efi_fs_uuid - e.g. multiboot disks
    search --fs-uuid --set=root $efi_fs_uuid
    load_grub_cfg
    # If we got here, grub.cfg file was not found
    error_no_grub_cfg
    error_no_uuid_cfg
fi
echo "Press RETURN to continue"
read
